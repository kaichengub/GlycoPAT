classdef Modification  
    %MODIFICATION: An object storing the properties of peptide modification
    %
    %  Syntax:
    %     modformula = Modification.formulaMap(mod1let);
    %
    %  Input:
    %     mod1let: single-letter for peptide modification type
    %     
    %  Output:
    %     modformula: chemical formula for peptide modification
    %
    %  Example:
    %     modform = Modification.formulaMap('o');
    %
    %  Note:                    Modification table:
    %                   ___________________________________
    %                   single-letter | type
    %                   ___________________________________
    %                              o  | oxidation
    %                              s  | sulfation
    %                              i  | carbamidomethylation
    %                              c  | carboxymethylation
    %                              p  | Phosphorylation
    %                              a  | acetylation
    %                              b  | biotinylation
    %                              q  | Pyro-glu Q
    %                              e  | Pyro-glu E
    %                              f  | Formylation
    %                              n  | Sodiation
    %                              d  | Deamidation     
    %                  ___________________________________
    %                             
    %See also Chemele, Glycan, Chemformula, Aminoacid, Protease, mzXML

    %Author: Gang Liu
    %Date Lastly Updated:1/19/2015
    
    properties (Constant)  % use small letter for modification
        mod1let     = {'o','s','i',...
                       'c','p','a',...
                       'b','q','e',...
                       'f','n','d'};
                   
        modfullname = {'oxidation','sulfation','carbamidomethylation',...
                       'carboxymethylation','Phosphorylation','acetylation',...                     
                       'biotinylation','Pyro-glu Q ',' Pyro-glu E',...
                       'Formylation','Sodiation','Deamidation'};
                   
        modadd      =  {1,1,1,...
                        1,1,1,...
                        1,0,0,...
                        1,1,1};
                    
        modformula  = {struct('O',1),...
                       struct('S',1,'O',3),...
                       struct('C',2,'H',3,'N',1,'O',1),...
                       struct('C',2,'H',2,'O',2),...
                       struct('P',1,'O',3,'H',1),...
                       struct('C',2,'H',2,'O',1),...
                       struct('C',10,'H',14,'N',2,'O',2,'S',1),...
                       struct('N',1,'H',3),...
                       struct('H',2,'O',1),...
                       struct('C',1,'O',1),...
                       struct('Na',1),...
                       struct('O',1,'N',-1,'H',-1)};
                   
         formulaMap  = containers.Map({'o','s','i',...
                       'c','p','a',...
                       'b','q','e',...
                       'f','n','d'},...
                       {struct('O',1),...
                       struct('S',1,'O',3),...
                       struct('C',2,'H',3,'N',1,'O',1),...
                       struct('C',2,'H',2,'O',2),...
                       struct('P',1,'O',3,'H',1),...
                       struct('C',2,'H',2,'O',1),...
                       struct('C',10,'H',14,'N',2,'O',2,'S',1),...
                       struct('N',1,'H',3),...
                       struct('H',2,'O',1),...
                       struct('C',1,'O',1),...
                       struct('Na',1)...
                       struct('O',1,'N',-1,'H',-1)};
         mwEffectMap = containers.Map({'o','s','i',...
                       'c','p','a',...
                       'b','q','e',...
                       'f','n','d'},...
                        {1,1,1,...
                        1,1,1,...
                        1,0,0,...
                        1,1,1});
    end
    
    methods(Static)
        function modchar = getmodchar
            modchar = char(Modification.mod1let)';
        end
        
        function aaexpr  = getmodcharexpr 
        % return regular expression of mod string
            aaexpr =['[^' Modification.getmodchar];
            aaexpr =[aaexpr ']'];
        end
        
        function ismodchar = ismodtring(stringinput)
            findnonmodchar = regexp(stringinput,Modification.getmodcharexpr, 'once');
            ismodchar      = isempty(findnonmodchar);
        end
    end
    
end

