function [guihandles,hit_protein]=scoreAllSpectra(varargin)
%SCOREALLSPECTRA: Match a list of peptides that are generated using
% the digest.m program ('Pepfile') with MS data files
%
% Syntax:
%    hit = scoreAllSpectra(Pepfile,dtafilesDirectory,fragMod,MS1tol,MS1toUnit,...
%           MS2tol,MS2tolUnit,CSVOutputDir,CSVfilename,MaxLag,CutOffMed,FracMax,...
%           nmFrag,npFrag,ngFrag,selectPeak)
%
%    hit = scoreAllSpectra(Pepfile,dtafilesDirectory,fragMod,MS1tol,MS1toUnit,...
%           MS2tol,MS2tolUnit,CSVOutputDir,CSVfilename,MaxLag,CutOffMed,FracMax,...
%           nmFrag,npFrag,ngFrag,selectPeak,dispProgress)
%
%    hit = scoreAllSpectra(Pepfile,mzxmlfileDirectory,fragMod,MS1tol,MS1toUnit,...
%           MS2tol,MS2tolUnit,CSVOutputDir,CSVfilename,MaxLag,CutOffMed,FracMax,...
%           nmFrag,ngFrag,npFrag,selectPeak,dispProgress,mzxmlfilename)
%
%   hit = scoreAllSpectra(Pepfile,mzxmlfileDirectory,fragMod,MS1tol,MS1toUnit,...
%           MS2tol,MS2tolUnit,CSVOutputDir,CSVfilename,MaxLag,CutOffMed,FracMax,...
%           nmFrag,ngFrag,npFrag,selectPeak,dispProgress,mzxmlfilename)
%
% Input:
%  Pepfile: Theoretical peptide list generated by digest.m
%  dtafilesDirectory: DTA MS data storage location
%  fragMod: 'CID', 'HCD', 'ETD', 'CIDSpecial', 'HCDSpecial', 'ETDSpecial' or 'none'
%  MS1tol, MS1tolUnit: number and units either 'ppm' or 'Da'
%  MS2tol, MS2tolUnit: number and units either 'ppm' or 'Da'
%  CSVOutputDir, CSVfilename: Output CSV file directory location and file name
%  Parameters used for XCorr ('Maxlag') and PolishSpectra ('CutOffMed', 'FracMax')
%  nFrag parameters, nmFrag, ngFrag and npFrag (used in case of CID/HCD/ETDSpecial).
%  selectPeak: if looking for glycan signature or other peaks
%  dispProgress: option to display progress
%
% Output:
%    hit: score results
%    a local CSV file with hits and scores tabulated
%
% Example:
%   glycopatroot = 'c:\glycopat\'; % replace 'c:\glyocpat with glycopat installation directory
%   pepfile= 'digestedfetuin_Nglycanonly.txt ';
%   xmlfilepath = fullfile(glycopatroot, 'toolbox', 'test', 'data', 'mzxml');
%   pepfilefullname = fullfile(xmlfilepath,pepfile);
%   mzxmlfilename = 'fetuin_test.mzXML';
%   fragMode = 'AUTO';
%   MS1tol = 10.000000;
%   MS1tolUnit = 'ppm';
%   MS2tol = 1.000000;
%   MS2tolUnit = 'Da';
%   OutputDir = xmlfilepath;
%   OutCSVname = 'testmzxmlscore.csv';
%   maxlag = 50;
%   CutOffMed = 2.000000;
%   FracMax = 0.020000;
%   nmFrag = 0;
%   npFrag = 2;
%   ngFrag = 0;
%   selectPeak =[163.1,292.1,366,454.1,657.2];
%   calchit = scoreAllSpectra(pepfilefullname,xmlfilepath,fragMode,MS1tol,MS1tolUnit,MS2tol, ...
%     MS2tolUnit,OutputDir,OutCSVname,maxlag,CutOffMed,FracMax,nmFrag,npFrag,ngFrag, ...
%     selectPeak,false,mzxmlfilename);
%
%  Example 2:
%   glycopatroot    = 'c:\glycopat\'; % replace 'c:\glyocpat' with glycopat installation directory
%   pepfile         = 'digestedfetuin_Nglycanonly.txt ';
%   pepfilepath     = fullfile(glycopatroot, 'toolbox', 'test', 'data', 'gplib');
%   dtafilepath     = fullfile(glycopatroot, 'toolbox', 'test', 'data', 'dta','fetuin');
%   pepfilefullname = fullfile(pepfilepath,pepfile);
%   fragMode        = 'CID';
%   MS1tol          = 10.000000;
%   MS1tolUnit      = 'ppm';
%   MS2tol          = 1.000000;
%   MS2tolUnit      = 'Da';
%   CSVOutputDir    = dtafilepath;
%   CSVfilename     = 'testdtascore.csv';
%   maxlag          = 50;
%   CutOffMed       = 2.000000;
%   FracMax         = 0.020000;
%   nmFrag          = 0;
%   npFrag          = 0;
%   ngFrag          = 2;
%   selectPeak      = [163.1,292.1,366,454.1,657.2];
%    hit            = scoreAllSpectra(pepfilefullname,dtafilepath,fragMode,MS1tol,MS1tolUnit,...
%           MS2tol,MS2tolUnit,CSVOutputDir,CSVfilename,maxlag,CutOffMed,FracMax,...
%           nmFrag,npFrag,ngFrag,selectPeak)
%
%
% Children functions: GetData, score1Spectrum, glypepMW, struct2csv.
%
%See also score1Spectrum, scoreAllSpectra_spmd, scoreAllSpectra_parfor.

% Author: Sriram Neelamegham and Gang Liu
% Date Lastly Updated: 12/11/16 by Sriram Neelamegham

narginchk(16,19);
Pepfile=varargin{1};
DataDirectory=varargin{2};
fragMode=varargin{3};
MS1tol=varargin{4};
MS1tolUnit=varargin{5};
MS2tol=varargin{6};
MS2tolUnit=varargin{7};
OutputDir=varargin{8};
Outfname=varargin{9};
maxlag=varargin{10};
CutOffMed=varargin{11};
FracMax=varargin{12};
nmFrag=varargin{13};
npFrag=varargin{14};
ngFrag=varargin{15};
selectPeak=varargin{16};
guihandles=[];
%     veryLabilePTM=varargin{17}; Leave for future work
%     pseudoLabilePTM=varargin{18};
if(nargin>=17)
    dispprogress=varargin{17};
else
    dispprogress = false;
end

usemzxml = 0;

if(nargin==18)
    mzxmlfilename = varargin{18};
    usemzxml = 1;
end

if(nargin == 19)
    mzxmlfilename = varargin{18};
    usemzxml = 1;
    if exist('guihandles','var')
        guihandles = guidata(varargin{19}.edit_statusreport);
    end
end
statusstrlen = zeros(200,1);
% set(guihandles.edit_statusreport, 'String', 'Written from external function!');


%% read MS data from mzXML file or DTA fils
if(usemzxml)  % mzXML file support
    %     if exist('guihandles','var')
    if ~isempty(guihandles)
        set(guihandles.edit_statusreport, 'String', 'Reading mzXML file...');
    end
    xmlfullfilename = fullfile(DataDirectory,mzxmlfilename);
    mzXMLobj        = mzXML(xmlfullfilename,0,'memsave');
    Scan = mzXMLobj.retrieveScanNum;
    z    = mzXMLobj.retrievezCharge;
    Mz   = mzXMLobj.retrieveMz;
    MH   = Mz.*z - (z-1)*1.007825032;
    numSpectra=length(Scan);
    %     if exist('guihandles','var')
    if ~isempty(guihandles)
        set(guihandles.edit_statusreport, 'String', 'File reading complete.');
    end
else   % support for DTA file format
    files        = dir(DataDirectory);               % reads directory and puts it in a matlab structure
    filename     = {files(~[files.isdir]).name}'; % reads filename from structure and puts in cell, excluding directory elements
    tempfilename = [];
    for i=1:length(filename)
        [pathstr,name,ext] = fileparts(char(filename(i)));
        if regexp(ext,'dta')   % includes only files that contain the text 'dta'
            tempfilename=[tempfilename,filename(i)];
        end
    end
    filename   = tempfilename';
    filestring = char(filename);              % converts cell array to string array
    numSpectra = length(filename);
    for i = 1 : numSpectra
        ithFile    = filestring(i,:);
        dots       = strfind(ithFile,'.');
        Scan(i)    = str2double(ithFile(dots(1)+1:dots(2)-1));  % Reads all Scan numbers is a directory and places it in array Scan
        xfile      = fullfile(DataDirectory,filestring(i,:));
        [MH(i),z(i),Spectra{i}] = GetData(xfile);   % read MS data from DTA files
    end
end

nFrag       = [nmFrag,ngFrag,npFrag];
param       = [maxlag,CutOffMed,FracMax];
fullOutName = fullfile(OutputDir,Outfname);

% Read list of theoretically possible products
%  [PepNames]=textread(Pepfile,'%s%*[^\n]');
% fulldtafilename = fullfile(DataDirectory,Pepfile);
% fileID  = fopen(fulldtafilename);
fileID = fopen(Pepfile);
if(fileID==-1)
    error('MATLAB:GlycoPAT:OPENFILEERROR','FILE DOES NOT EXIST');
end
pepData = textscan(fileID,'%s%*[^\n]');
fclose(fileID);
[nProtein,startPep,endPep,headerinfo]=ParsePeptideCell(pepData{1});

totalpepnum=0;
for k = 1 :nProtein
    PepNames=pepData{1}(startPep(k):endPep(k));
    totalpepnum=totalpepnum+length(PepNames);
end

if(dispprogress)
    counttot = nProtein*numSpectra+totalpepnum;
    count    = 0;
    h        = waitbar(0,'Please wait...');
end

% assign the parameter to csvheaderinfo.
csvheaderinfo.Pepfile = Pepfile;

if(~usemzxml)
    csvheaderinfo.DataDirectory = DataDirectory;
else
    csvheaderinfo.xmlfullfilename = xmlfullfilename;
end

csvheaderinfo.fragMode   = fragMode;
csvheaderinfo.MS1tol     = MS1tol;
csvheaderinfo.MS1tolUnit = MS1tolUnit;
csvheaderinfo.MS2tol     = MS2tol;
csvheaderinfo.MS2tolUnit = MS2tolUnit;
if strcmpi(fragMode,'Auto')
    csvheaderinfo.nFrag      = 'set to default values';
else
    csvheaderinfo.nFrag      = nFrag;
end
csvheaderinfo.maxlag     = maxlag;
csvheaderinfo.CutOffMed  = CutOffMed;
csvheaderinfo.FracMax    = FracMax;
csvheaderinfo.selectPeak = selectPeak;

spectralengthfilter = 10;
statusstr='';
for k=1:nProtein
    PepNames=pepData{1}(startPep(k):endPep(k));
    disp('calculating isotopic mass');
    PepMS1 = zeros(length(PepNames),1);
    for i=1:length(PepNames)
        % [PepMS1(i,1),PepMost(i,1),~]=glypepformula(char(PepNames(i)));
        PepMS1(i,1)=glypepMW(char(PepNames(i)));
        if(dispprogress)
            count  =  count + 1;
            waitbar(count/counttot,h);
        end
    end
    hitCount=0;
    hit=[];
    for i = 1 : numSpectra
        if(dispprogress)
            count  =  count + 1;
            waitbar(count/counttot,h);
        end
        
        if(usemzxml&&(isempty(mzXMLobj.mzxmljava.rap(i))||mzXMLobj.mzxmljava.rap(i).getMsLevel~=2))
            continue;
        end
        
        % check if the spectra has fewer than 10 peaks
        SmallGlyPep =[];
        
        if (strcmpi(MS1tolUnit,'ppm'))
            mhMonoDiff = abs(PepMS1(:,1)+1.007825032-MH(i))<=MS1tol/1e6*MH(i);
            if any(mhMonoDiff)
                list=find(mhMonoDiff);
                try
                    SmallGlyPep=PepNames(list);   % find the peptide of interest, there may be more than one
                catch err
                    disp('error in list');
                end
                Mono=PepMS1(list);
                %   Most=PepMost(list);
            end
        elseif(strcmpi(MS1tolUnit,'Da'))
            mhMonoDiffDa = abs(PepMS1(:,1)+1.007825032-MH(i))<=MS1tol;
            if any(mhMonoDiffDa) % if tolerance is given in Da units
                list=find(mhMonoDiffDa);
                SmallGlyPep=PepNames(list);   % find the peptide of interest, there may be more than one
                Mono=PepMS1(list);
                %  Most=PepMost(list);
            end
        else
            error('MATLAB:GlycoPAT:ERRORUNIT','INCORRECT UNIT FOR MS1 TOL');
        end
        
        % display scan number and possible hits
        i
        fprintf(1,'scan number: %i\n',Scan(i));
        fprintf(1,'possible glycopeptide:\n');
        SmallGlyPep
        %         if exist('guihandles','var')
        if ~isempty(guihandles)
            if isempty(SmallGlyPep)
                statusstr = [sprintf('scan number:%i\n',Scan(i)),sprintf('Possible Glycopeptide: None\n'),statusstr];
            else
                statusstr = [sprintf('scan number:%i\n',Scan(i)),sprintf('Possible Glycopeptide:%s\n',SmallGlyPep{1}),statusstr];
            end
            if length(statusstr) > 500
                statusstrbegin = strfind(statusstr,'scan number');
                statusstr = statusstr(1:statusstrbegin(end-1)-1);
                %             statusstr = statusstr(length(statusstr-500):end);
            end
            set(guihandles.edit_statusreport, 'String', statusstr);
        end
        if(~isempty(SmallGlyPep))
            % spectraA = Spectra{i};
            zA  = z(i);
            MHA = MH(i);
            if(usemzxml==1)
                spectraA = mzXMLobj.retrieveMSSpectra(i);
                if(length(spectraA)<=spectralengthfilter)
                    continue;
                end
                %% spectra filter (3 filter)
                
                % check if the spectra is the right spectra for the fragmentation
                % mode
                if(strcmpi(fragMode,'ETD')||strcmpi(fragMode,'ETDSpecial'))
                    actmethod = 'ETD';
                elseif(strcmpi(fragMode,'CID')||strcmpi(fragMode,'CIDSpecial'))
                    actmethod = 'CID' ;
                elseif(strcmpi(fragMode,'HCD')||strcmpi(fragMode,'HCDSpecial'))
                    actmethod = 'HCD';
                elseif(strcmpi(fragMode,'Auto'))
                    actmethod = 'Auto';
                else
                    continue;   % skip testing
                end
                
                if(strcmpi(actmethod,'Auto'))
                    actmetfromdata = mzXMLobj.retrieveActMethod(i);
                    if(~isempty(strfind(upper(actmetfromdata),'ETD')))
                        actmethod ='ETD';
                    elseif(~isempty(strfind(upper(actmetfromdata),'CID')))
                        actmethod ='CID';
                    elseif(~isempty(strfind(upper(actmetfromdata),'HCD')))
                        actmethod ='HCD';
                    else
                        continue;
                    end
                elseif(~isempty(actmethod))
                    actmetfromdata = mzXMLobj.retrieveActMethod(i);
                    if(isempty(strfind(upper(actmetfromdata),upper(actmethod))))
                        continue;
                    end
                    actmethod = fragMode;
                else
                    continue;
                end
            else
                spectraA  = Spectra{i};
                actmethod = fragMode;
            end
        end
        
        for j=1:length(SmallGlyPep)
            spectrascores = score1Spectrum(spectraA,SmallGlyPep(j),...
                actmethod,MS2tol,MS2tolUnit,param,nFrag,selectPeak,zA,MHA,1);
            if(hitCount==0)
                disp('debugging point');
            end
            hitCount=hitCount+1;
            hit(hitCount).protein    = headerinfo{k};
            hit(hitCount).Scan       = Scan(i);
            hit(hitCount).Expt       = MH(i)-1.0078246;
            hit(hitCount).Mono       = Mono(j);
            hit(hitCount).Most       = 0;% Most(j);
            hit(hitCount).charge     = zA;
            hit(hitCount).sgp        = SmallGlyPep{j};
            if strcmpi(fragMode,'Auto')
                hit(hitCount).fragmode   = actmethod;
            else
                hit(hitCount).fragmode   = fragMode;
            end
            hit(hitCount).peakLag    =  spectrascores.peakLag;
            hit(hitCount).htCenter   =  spectrascores.htCenter;
            hit(hitCount).htAvg      =  spectrascores.htAvg;
            hit(hitCount).percentIonMatch = spectrascores.percentIonMatch;
            hit(hitCount).Pvalue     = spectrascores.Pvalue;
            hit(hitCount).decoyRatio = spectrascores.decoyRatioP;
            hit(hitCount).Top10      = spectrascores.Top10;
            hit(hitCount).selectPeak = spectrascores.foundSelectPeak;
            hit(hitCount).nmFrag     = spectrascores.nFrag(1);
            hit(hitCount).ngFrag     = spectrascores.nFrag(2);
            hit(hitCount).npFrag     = spectrascores.nFrag(3);
            hit(hitCount).enscore    = spectrascores.enscore;
            hit(hitCount).fdrdecoyenscore = spectrascores.fdrdecoyenscore;
        end
    end
    
    % convert select peak to string
    for i = 1 : length(hit)
        peakstring='';
        for j=1:length(hit(i).selectPeak)
            peakstring=[peakstring,num2str(hit(i).selectPeak(j)),'*'];
        end
        hit(i).selectPeak = peakstring;
    end
    hit_protein{k} = hit;
end
% output file using subfunctions
scoreCSVwrite(csvheaderinfo,hit_protein,fullOutName);

if(dispprogress)
    close(h);
end

end